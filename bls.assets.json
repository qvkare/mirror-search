{
  "/index.html": "data:text/html;base64,",
  "/style.css": "data:text/css;base64,",
  "/test.html": "data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9InRyIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+QXJhbWEgVGVzdGk8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgogICAgPGgxPkFyYW1hIE1vdG9ydSBEZWJ1ZyBUZXN0aTwvaDE+CiAgICAKICAgIDxmb3JtIGlkPSJ0ZXN0Rm9ybSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ0ZXN0SW5wdXQiIHBsYWNlaG9sZGVyPSJBcmFtYSB0ZXJpbWkgZ2lyaW4iIHZhbHVlPSJqYXZhc2NyaXB0IHR1dG9yaWFsIj4KICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCI+QXJhPC9idXR0b24+CiAgICA8L2Zvcm0+CiAgICAKICAgIDxkaXYgaWQ9InN0YXR1cyI+PC9kaXY+CiAgICA8ZGl2IGlkPSJyZXN1bHRzIj48L2Rpdj4KCiAgICA8c2NyaXB0PgogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXN0Rm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RJbnB1dCcpLnZhbHVlOwogICAgICAgICAgICBjb25zdCBzdGF0dXNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzJyk7CiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdWx0cycpOwogICAgICAgICAgICAKICAgICAgICAgICAgc3RhdHVzRGl2LmlubmVySFRNTCA9ICdBcmFuxLF5b3IuLi4nOwogICAgICAgICAgICByZXN1bHRzRGl2LmlubmVySFRNTCA9ICcnOwogICAgICAgICAgICAKICAgICAgICAgICAgY29uc29sZS5sb2coJ/CflI0gVGVzdCBhcmFtYSBiYcWfbGF0xLFsxLF5b3I6JywgcXVlcnkpOwogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9zZWFyY2gnLCB7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICBxOiBxdWVyeSwKICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lOiAnZ29vZ2xlJywKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogMQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk6EgUmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn8J+ToSBSZXNwb25zZSBoZWFkZXJzOicsIHJlc3BvbnNlLmhlYWRlcnMpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ogUmVzcG9uc2UgZGF0YTonLCBkYXRhKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc3RhdHVzRGl2LmlubmVySFRNTCA9IGDinIUgQXJhbWEgdGFtYW1sYW5kxLEhICR7ZGF0YS5yZXN1bHRzPy5sZW5ndGggfHwgMH0gc29udcOnIGJ1bHVuZHUuYDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0cyAmJiBkYXRhLnJlc3VsdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdHNEaXYuaW5uZXJIVE1MID0gJzxoMj5Tb251w6dsYXI6PC9oMj4nICsgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cy5tYXAocmVzdWx0ID0+IGAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkICNjY2M7IHBhZGRpbmc6IDEwcHg7IG1hcmdpbjogMTBweCAwOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPjxhIGhyZWY9IiR7cmVzdWx0Lmxpbmt9IiB0YXJnZXQ9Il9ibGFuayI+JHtyZXN1bHQudGl0bGV9PC9hPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+JHtyZXN1bHQuc25pcHBldH08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPiR7cmVzdWx0Lmxpbmt9PC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICBgKS5qb2luKCcnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0Rpdi5pbm5lckhUTUwgPSAnPHA+U29udcOnIGJ1bHVuYW1hZMSxLjwvcD4nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgQXJhbWEgaGF0YXPEsTonLCBlcnJvcik7CiAgICAgICAgICAgICAgICBzdGF0dXNEaXYuaW5uZXJIVE1MID0gJ+KdjCBIYXRhIG9sdcWfdHU6ICcgKyBlcnJvci5tZXNzYWdlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+IA==",
  "/js/app.js": "data:application/javascript;base64,",
  "/js/search.js": "data:application/javascript;base64,Ly8gU2VhcmNoIFV0aWxpdGllcyBhbmQgQWR2YW5jZWQgRmVhdHVyZXMKY2xhc3MgU2VhcmNoVXRpbHMgewogICAgY29uc3RydWN0b3IoKSB7CiAgICAgICAgdGhpcy5zZWFyY2hIaXN0b3J5ID0gW107CiAgICAgICAgdGhpcy5zdWdnZXN0aW9ucyA9IFtdOwogICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7CiAgICAgICAgdGhpcy5tYXhDYWNoZVNpemUgPSA1MDsKICAgICAgICB0aGlzLm1heEhpc3RvcnlTaXplID0gMTAwOwogICAgICAgIAogICAgICAgIHRoaXMubG9hZEhpc3RvcnkoKTsKICAgIH0KCiAgICAvLyBTZWFyY2ggc3VnZ2VzdGlvbnMgYmFzZWQgb24gaW5wdXQKICAgIGdlbmVyYXRlU3VnZ2VzdGlvbnMoaW5wdXQpIHsKICAgICAgICBpZiAoIWlucHV0IHx8IGlucHV0Lmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgY29tbW9uUXVlcmllcyA9IFsKICAgICAgICAgICAgJ2hvdyB0byBsZWFybiBwcm9ncmFtbWluZycsCiAgICAgICAgICAgICdiZXN0IHByaXZhY3kgdG9vbHMnLAogICAgICAgICAgICAnd2hhdCBpcyBibG9ja2NoYWluJywKICAgICAgICAgICAgJ2xlYXJuIGphdmFzY3JpcHQnLAogICAgICAgICAgICAncHJpdmFjeSBzZWFyY2ggZW5naW5lJywKICAgICAgICAgICAgJ2hvdyB0byBwcm90ZWN0IG9ubGluZSBwcml2YWN5JywKICAgICAgICAgICAgJ2Jlc3QgY29kaW5nIHByYWN0aWNlcycsCiAgICAgICAgICAgICd3ZWIgZGV2ZWxvcG1lbnQgdHV0b3JpYWwnLAogICAgICAgICAgICAnc2VjdXJlIGJyb3dzaW5nIHRpcHMnLAogICAgICAgICAgICAnb3BlbiBzb3VyY2UgYWx0ZXJuYXRpdmVzJwogICAgICAgIF07CgogICAgICAgIHJldHVybiBjb21tb25RdWVyaWVzCiAgICAgICAgICAgIC5maWx0ZXIocXVlcnkgPT4gcXVlcnkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhpbnB1dC50b0xvd2VyQ2FzZSgpKSkKICAgICAgICAgICAgLnNsaWNlKDAsIDUpOwogICAgfQoKICAgIC8vIEFkZCBzZWFyY2ggdG8gaGlzdG9yeQogICAgYWRkVG9IaXN0b3J5KHF1ZXJ5LCBlbmdpbmUgPSAnZ29vZ2xlJykgewogICAgICAgIGlmICghcXVlcnkgfHwgcXVlcnkudHJpbSgpLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwoKICAgICAgICBjb25zdCBoaXN0b3J5SXRlbSA9IHsKICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LnRyaW0oKSwKICAgICAgICAgICAgZW5naW5lOiBlbmdpbmUsCiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICAgICAgaWQ6IHRoaXMuZ2VuZXJhdGVJZCgpCiAgICAgICAgfTsKCiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMKICAgICAgICB0aGlzLnNlYXJjaEhpc3RvcnkgPSB0aGlzLnNlYXJjaEhpc3RvcnkuZmlsdGVyKAogICAgICAgICAgICBpdGVtID0+IGl0ZW0ucXVlcnkudG9Mb3dlckNhc2UoKSAhPT0gcXVlcnkudG9Mb3dlckNhc2UoKQogICAgICAgICk7CgogICAgICAgIC8vIEFkZCB0byBiZWdpbm5pbmcKICAgICAgICB0aGlzLnNlYXJjaEhpc3RvcnkudW5zaGlmdChoaXN0b3J5SXRlbSk7CgogICAgICAgIC8vIExpbWl0IGhpc3Rvcnkgc2l6ZQogICAgICAgIGlmICh0aGlzLnNlYXJjaEhpc3RvcnkubGVuZ3RoID4gdGhpcy5tYXhIaXN0b3J5U2l6ZSkgewogICAgICAgICAgICB0aGlzLnNlYXJjaEhpc3RvcnkgPSB0aGlzLnNlYXJjaEhpc3Rvcnkuc2xpY2UoMCwgdGhpcy5tYXhIaXN0b3J5U2l6ZSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnNhdmVIaXN0b3J5KCk7CiAgICB9CgogICAgLy8gR2V0IHNlYXJjaCBoaXN0b3J5CiAgICBnZXRIaXN0b3J5KCkgewogICAgICAgIHJldHVybiB0aGlzLnNlYXJjaEhpc3Rvcnkuc2xpY2UoMCwgMjApOyAvLyBSZXR1cm4gbGFzdCAyMCBzZWFyY2hlcwogICAgfQoKICAgIC8vIENsZWFyIHNlYXJjaCBoaXN0b3J5CiAgICBjbGVhckhpc3RvcnkoKSB7CiAgICAgICAgdGhpcy5zZWFyY2hIaXN0b3J5ID0gW107CiAgICAgICAgdGhpcy5zYXZlSGlzdG9yeSgpOwogICAgfQoKICAgIC8vIENhY2hlIHNlYXJjaCByZXN1bHRzCiAgICBjYWNoZVJlc3VsdHMocXVlcnksIHJlc3VsdHMsIGVuZ2luZSA9ICdnb29nbGUnKSB7CiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlQ2FjaGVLZXkocXVlcnksIGVuZ2luZSk7CiAgICAgICAgY29uc3QgY2FjaGVJdGVtID0gewogICAgICAgICAgICByZXN1bHRzLAogICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgICAgIGVuZ2luZSwKICAgICAgICAgICAgdHRsOiAxMCAqIDYwICogMTAwMCAvLyAxMCBtaW51dGVzCiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5jYWNoZS5zZXQoY2FjaGVLZXksIGNhY2hlSXRlbSk7CgogICAgICAgIC8vIENsZWFuIG9sZCBjYWNoZSBlbnRyaWVzCiAgICAgICAgaWYgKHRoaXMuY2FjaGUuc2l6ZSA+IHRoaXMubWF4Q2FjaGVTaXplKSB7CiAgICAgICAgICAgIHRoaXMuY2xlYW5DYWNoZSgpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBHZXQgY2FjaGVkIHJlc3VsdHMKICAgIGdldENhY2hlZFJlc3VsdHMocXVlcnksIGVuZ2luZSA9ICdnb29nbGUnKSB7CiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlQ2FjaGVLZXkocXVlcnksIGVuZ2luZSk7CiAgICAgICAgY29uc3QgY2FjaGVJdGVtID0gdGhpcy5jYWNoZS5nZXQoY2FjaGVLZXkpOwoKICAgICAgICBpZiAoIWNhY2hlSXRlbSkgcmV0dXJuIG51bGw7CgogICAgICAgIC8vIENoZWNrIGlmIGNhY2hlIGlzIHN0aWxsIHZhbGlkCiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTsKICAgICAgICBpZiAobm93IC0gY2FjaGVJdGVtLnRpbWVzdGFtcCA+IGNhY2hlSXRlbS50dGwpIHsKICAgICAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUoY2FjaGVLZXkpOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUubG9nKCfwn5OLIFVzaW5nIGNhY2hlZCByZXN1bHRzIGZvcjonLCBxdWVyeSk7CiAgICAgICAgcmV0dXJuIGNhY2hlSXRlbS5yZXN1bHRzOwogICAgfQoKICAgIC8vIENsZWFuIGV4cGlyZWQgY2FjaGUgZW50cmllcwogICAgY2xlYW5DYWNoZSgpIHsKICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpOwogICAgICAgIGNvbnN0IHRvRGVsZXRlID0gW107CgogICAgICAgIGZvciAoY29uc3QgW2tleSwgaXRlbV0gb2YgdGhpcy5jYWNoZS5lbnRyaWVzKCkpIHsKICAgICAgICAgICAgaWYgKG5vdyAtIGl0ZW0udGltZXN0YW1wID4gaXRlbS50dGwpIHsKICAgICAgICAgICAgICAgIHRvRGVsZXRlLnB1c2goa2V5KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdG9EZWxldGUuZm9yRWFjaChrZXkgPT4gdGhpcy5jYWNoZS5kZWxldGUoa2V5KSk7CgogICAgICAgIC8vIElmIHN0aWxsIHRvbyBsYXJnZSwgcmVtb3ZlIG9sZGVzdCBlbnRyaWVzCiAgICAgICAgaWYgKHRoaXMuY2FjaGUuc2l6ZSA+IHRoaXMubWF4Q2FjaGVTaXplKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBBcnJheS5mcm9tKHRoaXMuY2FjaGUuZW50cmllcygpKTsKICAgICAgICAgICAgZW50cmllcy5zb3J0KChhLCBiKSA9PiBhWzFdLnRpbWVzdGFtcCAtIGJbMV0udGltZXN0YW1wKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IHRvUmVtb3ZlID0gZW50cmllcy5zbGljZSgwLCB0aGlzLmNhY2hlLnNpemUgLSB0aGlzLm1heENhY2hlU2l6ZSk7CiAgICAgICAgICAgIHRvUmVtb3ZlLmZvckVhY2goKFtrZXldKSA9PiB0aGlzLmNhY2hlLmRlbGV0ZShrZXkpKTsKICAgICAgICB9CiAgICB9CgogICAgLy8gR2VuZXJhdGUgY2FjaGUga2V5CiAgICBnZW5lcmF0ZUNhY2hlS2V5KHF1ZXJ5LCBlbmdpbmUpIHsKICAgICAgICByZXR1cm4gYCR7ZW5naW5lfToke3F1ZXJ5LnRvTG93ZXJDYXNlKCkudHJpbSgpfWA7CiAgICB9CgogICAgLy8gR2VuZXJhdGUgdW5pcXVlIElECiAgICBnZW5lcmF0ZUlkKCkgewogICAgICAgIHJldHVybiBEYXRlLm5vdygpLnRvU3RyaW5nKDM2KSArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyKTsKICAgIH0KCiAgICAvLyBMb2FkIHNlYXJjaCBoaXN0b3J5IGZyb20gbG9jYWxTdG9yYWdlCiAgICBsb2FkSGlzdG9yeSgpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCBzYXZlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtaXJyb3Itc2VhcmNoLWhpc3RvcnknKTsKICAgICAgICAgICAgaWYgKHNhdmVkKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaEhpc3RvcnkgPSBKU09OLnBhcnNlKHNhdmVkKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gQ2xlYW4gb2xkIGVudHJpZXMgKG9sZGVyIHRoYW4gMzAgZGF5cykKICAgICAgICAgICAgICAgIGNvbnN0IHRoaXJ0eURheXNBZ28gPSBEYXRlLm5vdygpIC0gKDMwICogMjQgKiA2MCAqIDYwICogMTAwMCk7CiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaEhpc3RvcnkgPSB0aGlzLnNlYXJjaEhpc3RvcnkuZmlsdGVyKAogICAgICAgICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS50aW1lc3RhbXAgPiB0aGlydHlEYXlzQWdvCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gbG9hZCBzZWFyY2ggaGlzdG9yeTonLCBlcnJvcik7CiAgICAgICAgICAgIHRoaXMuc2VhcmNoSGlzdG9yeSA9IFtdOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBTYXZlIHNlYXJjaCBoaXN0b3J5IHRvIGxvY2FsU3RvcmFnZQogICAgc2F2ZUhpc3RvcnkoKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21pcnJvci1zZWFyY2gtaGlzdG9yeScsIEpTT04uc3RyaW5naWZ5KHRoaXMuc2VhcmNoSGlzdG9yeSkpOwogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHNhdmUgc2VhcmNoIGhpc3Rvcnk6JywgZXJyb3IpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBGb3JtYXQgc2VhcmNoIHJlc3VsdHMgZm9yIGRpc3BsYXkKICAgIGZvcm1hdFJlc3VsdHMocmVzdWx0cykgewogICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHRzKSkgcmV0dXJuIFtdOwoKICAgICAgICByZXR1cm4gcmVzdWx0cy5tYXAocmVzdWx0ID0+ICh7CiAgICAgICAgICAgIC4uLnJlc3VsdCwKICAgICAgICAgICAgdGl0bGU6IHRoaXMuc2FuaXRpemVUZXh0KHJlc3VsdC50aXRsZSksCiAgICAgICAgICAgIHNuaXBwZXQ6IHRoaXMuc2FuaXRpemVUZXh0KHJlc3VsdC5zbmlwcGV0KSwKICAgICAgICAgICAgZGlzcGxheVVybDogdGhpcy5mb3JtYXREaXNwbGF5VXJsKHJlc3VsdC51cmwpLAogICAgICAgICAgICBmYXZpY29uOiB0aGlzLmdldEZhdmljb25VcmwocmVzdWx0LnVybCkKICAgICAgICB9KSk7CiAgICB9CgogICAgLy8gU2FuaXRpemUgdGV4dCBjb250ZW50CiAgICBzYW5pdGl6ZVRleHQodGV4dCkgewogICAgICAgIGlmICghdGV4dCkgcmV0dXJuICcnOwogICAgICAgIAogICAgICAgIC8vIFJlbW92ZSBIVE1MIHRhZ3MgYW5kIGRlY29kZSBlbnRpdGllcwogICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGRpdi5pbm5lckhUTUwgPSB0ZXh0OwogICAgICAgIHJldHVybiBkaXYudGV4dENvbnRlbnQgfHwgZGl2LmlubmVyVGV4dCB8fCAnJzsKICAgIH0KCiAgICAvLyBGb3JtYXQgZGlzcGxheSBVUkwKICAgIGZvcm1hdERpc3BsYXlVcmwodXJsKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29uc3QgdXJsT2JqID0gbmV3IFVSTCh1cmwpOwogICAgICAgICAgICBsZXQgZGlzcGxheSA9IHVybE9iai5ob3N0bmFtZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICh1cmxPYmoucGF0aG5hbWUgIT09ICcvJykgewogICAgICAgICAgICAgICAgZGlzcGxheSArPSB1cmxPYmoucGF0aG5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIExpbWl0IGxlbmd0aAogICAgICAgICAgICBpZiAoZGlzcGxheS5sZW5ndGggPiA1MCkgewogICAgICAgICAgICAgICAgZGlzcGxheSA9IGRpc3BsYXkuc3Vic3RyaW5nKDAsIDQ3KSArICcuLi4nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gZGlzcGxheTsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICByZXR1cm4gdXJsOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBHZXQgZmF2aWNvbiBVUkwKICAgIGdldEZhdmljb25VcmwodXJsKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29uc3QgdXJsT2JqID0gbmV3IFVSTCh1cmwpOwogICAgICAgICAgICByZXR1cm4gYGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/ZG9tYWluPSR7dXJsT2JqLmhvc3RuYW1lfWA7CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgcmV0dXJuICcvaW1hZ2VzL2RlZmF1bHQtZmF2aWNvbi5wbmcnOwogICAgICAgIH0KICAgIH0KCiAgICAvLyBWYWxpZGF0ZSBzZWFyY2ggcXVlcnkKICAgIHZhbGlkYXRlUXVlcnkocXVlcnkpIHsKICAgICAgICBpZiAoIXF1ZXJ5IHx8IHR5cGVvZiBxdWVyeSAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogJ1F1ZXJ5IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyB9OwogICAgICAgIH0KCiAgICAgICAgY29uc3QgdHJpbW1lZCA9IHF1ZXJ5LnRyaW0oKTsKICAgICAgICAKICAgICAgICBpZiAodHJpbW1lZC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogJ1F1ZXJ5IGNhbm5vdCBiZSBlbXB0eScgfTsKICAgICAgICB9CgogICAgICAgIGlmICh0cmltbWVkLmxlbmd0aCA+IDUwMCkgewogICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiAnUXVlcnkgdG9vIGxvbmcgKG1heCA1MDAgY2hhcmFjdGVycyknIH07CiAgICAgICAgfQoKICAgICAgICAvLyBDaGVjayBmb3IgcG90ZW50aWFsbHkgaGFybWZ1bCBjb250ZW50CiAgICAgICAgY29uc3QgaGFybWZ1bFBhdHRlcm5zID0gWwogICAgICAgICAgICAvPHNjcmlwdC9pLAogICAgICAgICAgICAvamF2YXNjcmlwdDovaSwKICAgICAgICAgICAgL2RhdGE6dGV4dFwvaHRtbC9pCiAgICAgICAgXTsKCiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGhhcm1mdWxQYXR0ZXJucykgewogICAgICAgICAgICBpZiAocGF0dGVybi50ZXN0KHRyaW1tZWQpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiAnUXVlcnkgY29udGFpbnMgcG90ZW50aWFsbHkgaGFybWZ1bCBjb250ZW50JyB9OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgcXVlcnk6IHRyaW1tZWQgfTsKICAgIH0KCiAgICAvLyBHZXQgc2VhcmNoIHN0YXRpc3RpY3MKICAgIGdldFN0YXRzKCkgewogICAgICAgIGNvbnN0IGVuZ2luZXMgPSB7fTsKICAgICAgICBjb25zdCBkYWlseVNlYXJjaGVzID0ge307CiAgICAgICAgCiAgICAgICAgdGhpcy5zZWFyY2hIaXN0b3J5LmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgIC8vIENvdW50IGJ5IGVuZ2luZQogICAgICAgICAgICBlbmdpbmVzW2l0ZW0uZW5naW5lXSA9IChlbmdpbmVzW2l0ZW0uZW5naW5lXSB8fCAwKSArIDE7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBDb3VudCBieSBkYXkKICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGl0ZW0udGltZXN0YW1wKS50b0RhdGVTdHJpbmcoKTsKICAgICAgICAgICAgZGFpbHlTZWFyY2hlc1tkYXRlXSA9IChkYWlseVNlYXJjaGVzW2RhdGVdIHx8IDApICsgMTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdG90YWxTZWFyY2hlczogdGhpcy5zZWFyY2hIaXN0b3J5Lmxlbmd0aCwKICAgICAgICAgICAgY2FjaGVTaXplOiB0aGlzLmNhY2hlLnNpemUsCiAgICAgICAgICAgIGNhY2hlSGl0UmF0ZTogdGhpcy5jYWxjdWxhdGVDYWNoZUhpdFJhdGUoKSwKICAgICAgICAgICAgZW5naW5lVXNhZ2U6IGVuZ2luZXMsCiAgICAgICAgICAgIGRhaWx5U2VhcmNoZXMsCiAgICAgICAgICAgIGxhc3RTZWFyY2g6IHRoaXMuc2VhcmNoSGlzdG9yeVswXT8udGltZXN0YW1wIHx8IG51bGwKICAgICAgICB9OwogICAgfQoKICAgIC8vIENhbGN1bGF0ZSBjYWNoZSBoaXQgcmF0ZQogICAgY2FsY3VsYXRlQ2FjaGVIaXRSYXRlKCkgewogICAgICAgIC8vIFRoaXMgd291bGQgYmUgaW1wbGVtZW50ZWQgd2l0aCBhY3R1YWwgaGl0L21pc3MgdHJhY2tpbmcKICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIDAuMyArIDAuNDsgLy8gTW9jayA0MC03MCUgaGl0IHJhdGUKICAgIH0KfQoKLy8gR2xvYmFsIHNlYXJjaCB1dGlsaXRpZXMgaW5zdGFuY2UKd2luZG93LnNlYXJjaFV0aWxzID0gbmV3IFNlYXJjaFV0aWxzKCk7CgovLyBFeHBvcnQgZm9yIG1vZHVsZSB1c2FnZQppZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgIG1vZHVsZS5leHBvcnRzID0gU2VhcmNoVXRpbHM7Cn0g",
  "/js/wasm-loader.js": "data:application/javascript;base64,"
}