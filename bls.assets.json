{
  "/index.html": "data:text/html;base64,",
  "/style.css": "data:text/css;base64,",
  "/test.html": "data:text/html;base64,PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9InRyIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+QXJhbWEgVGVzdGk8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5PgogICAgPGgxPkFyYW1hIE1vdG9ydSBEZWJ1ZyBUZXN0aTwvaDE+CiAgICAKICAgIDxmb3JtIGlkPSJ0ZXN0Rm9ybSI+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ0ZXN0SW5wdXQiIHBsYWNlaG9sZGVyPSJBcmFtYSB0ZXJpbWkgZ2lyaW4iIHZhbHVlPSJqYXZhc2NyaXB0IHR1dG9yaWFsIj4KICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCI+QXJhPC9idXR0b24+CiAgICA8L2Zvcm0+CiAgICAKICAgIDxkaXYgaWQ9InN0YXR1cyI+PC9kaXY+CiAgICA8ZGl2IGlkPSJyZXN1bHRzIj48L2Rpdj4KCiAgICA8c2NyaXB0PgogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXN0Rm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RJbnB1dCcpLnZhbHVlOwogICAgICAgICAgICBjb25zdCBzdGF0dXNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzJyk7CiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdWx0cycpOwogICAgICAgICAgICAKICAgICAgICAgICAgc3RhdHVzRGl2LmlubmVySFRNTCA9ICdBcmFuxLF5b3IuLi4nOwogICAgICAgICAgICByZXN1bHRzRGl2LmlubmVySFRNTCA9ICcnOwogICAgICAgICAgICAKICAgICAgICAgICAgY29uc29sZS5sb2coJ/CflI0gVGVzdCBhcmFtYSBiYcWfbGF0xLFsxLF5b3I6JywgcXVlcnkpOwogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9zZWFyY2gnLCB7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICBxOiBxdWVyeSwKICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lOiAnZ29vZ2xlJywKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogMQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk6EgUmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn8J+ToSBSZXNwb25zZSBoZWFkZXJzOicsIHJlc3BvbnNlLmhlYWRlcnMpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfk4ogUmVzcG9uc2UgZGF0YTonLCBkYXRhKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgc3RhdHVzRGl2LmlubmVySFRNTCA9IGDinIUgQXJhbWEgdGFtYW1sYW5kxLEhICR7ZGF0YS5yZXN1bHRzPy5sZW5ndGggfHwgMH0gc29udcOnIGJ1bHVuZHUuYDsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0cyAmJiBkYXRhLnJlc3VsdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdHNEaXYuaW5uZXJIVE1MID0gJzxoMj5Tb251w6dsYXI6PC9oMj4nICsgCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cy5tYXAocmVzdWx0ID0+IGAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImJvcmRlcjogMXB4IHNvbGlkICNjY2M7IHBhZGRpbmc6IDEwcHg7IG1hcmdpbjogMTBweCAwOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPjxhIGhyZWY9IiR7cmVzdWx0Lmxpbmt9IiB0YXJnZXQ9Il9ibGFuayI+JHtyZXN1bHQudGl0bGV9PC9hPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+JHtyZXN1bHQuc25pcHBldH08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPiR7cmVzdWx0Lmxpbmt9PC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICBgKS5qb2luKCcnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0Rpdi5pbm5lckhUTUwgPSAnPHA+U29udcOnIGJ1bHVuYW1hZMSxLjwvcD4nOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgQXJhbWEgaGF0YXPEsTonLCBlcnJvcik7CiAgICAgICAgICAgICAgICBzdGF0dXNEaXYuaW5uZXJIVE1MID0gJ+KdjCBIYXRhIG9sdcWfdHU6ICcgKyBlcnJvci5tZXNzYWdlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+IA==",
  "/js/app.js": "data:application/javascript;base64,",
  "/js/search.js": "data:application/javascript;base64,",
  "/js/wasm-loader.js": "data:application/javascript;base64,"
}